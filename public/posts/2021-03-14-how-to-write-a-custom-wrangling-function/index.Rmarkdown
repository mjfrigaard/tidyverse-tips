---
title: How to write a custom wrangling function
author: R package build
date: '2021-03-14'
slug: []
categories: []
tags: []
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.keep = FALSE,
                      collapse = TRUE,
                      eval = TRUE, 
                      warning = FALSE,
                      message = FALSE)
options(dplyr.tibble.print = 10)
library(tidyverse)
```


This post comes from a [Stackoverflow question](https://stackoverflow.com/questions/4350440/split-data-frame-string-column-into-multiple-columns) that I've revisited numerous times over the years. 

The original question:

> **Stackoverflow: Split data frame string column into multiple columns**

> *I'd like to take data of the form*

```{r , eval=FALSE}
before = data.frame(attr = c(1, 30, 4, 6), 
                    type = c('foo_and_bar', 
                             'foo_and_bar_2'))
                              
  attr          type
1    1   foo_and_bar
2   30 foo_and_bar_2
3    4   foo_and_bar
4    6 foo_and_bar_2
```

> *and use `split()` on the column "`type`" from above to get something like this:*

```{r , eval=FALSE}
  attr type_1 type_2
1    1    foo    bar
2   30    foo  bar_2
3    4    foo    bar
4    6    foo  bar_2
```

#### Load packages

Let's load the `tidyverse` and get started!

```{r packages}
library(tidyverse)
```

#### Create some messy data

Below is an example `tibble` with a jumbled `name` column (`JJJSBefore`) similar to the one above. I chose to use commas and spaces instead of underscores because I find them a little easier to read. 

```{r JJJSBefore}
JJJSBefore <- tibble::tribble(
     ~value,                       ~name,
        29L,                      "John",
        91L,               "John, Jacob",
        39L, "John, Jacob, Jingleheimer",
        28L,     "Jingleheimer, Schmidt",
        12L,              "JJJ, Schmidt")
```

```{r, echo=FALSE}
rmarkdown::paged_table(JJJSBefore)
```

<br></br>

***

### A 'not quite' solution

One possible solution is to combine `dplyr::mutate()`, `stringr::str_split()`, and `tidyr::unnest()`.  

```{r mutate-str_split-unnest, eval=FALSE}
JJJSBefore %>%
        dplyr::mutate(name = 
    # 1) split this on the ", " pattern
             stringr::str_split(string = name, 
                                pattern = ", ")) %>% 
    # 2) convert output from str_split across rows
        tidyr::unnest(name) 
```

```{r , echo=FALSE}
rmarkdown::paged_table(
JJJSBefore %>%
        dplyr::mutate(name = 
             stringr::str_split(string = name, 
                                pattern = ", ")) %>% 
        tidyr::unnest(name))
```

This gets the data into a tidy format, but it would require some additional wrangling steps to get the data back into the two columns the question was looking for. 

Fortunately, this particular question was posed 9 years and 6 months ago at the time of this writing, so there are quite a few solutions listed. I liked the approach [Yannis-P](https://stackoverflow.com/users/1885713/yannis-p) took because 1) it offers a `tidyverse` solution *and* 2) it's written as a function. 

I've copied Yannis-P's comment on the proposed solution below:

> *We can't use `dplyr` `separate()` because we don't know the number of the result columns before the split, so I have then created a function that uses `stringr` to split a column, given the pattern and a name prefix for the generated columns.*

<br></br>

### Original `split_into_multiple()`

Here is the function:

```{r example-split_into_multiple}
split_into_multiple <- function(column, pattern = ", ", into_prefix){
  cols <- str_split_fixed(column, pattern, n = Inf)
  # Sub out the ""'s returned by filling the matrix 
  # to the right, with NAs which are useful
  cols[which(cols == "")] <- NA
  
  cols <- as.tibble(cols)
  # name the 'cols' tibble as 'into_prefix_1', 
  # 'into_prefix_2', ..., 'into_prefix_m' 
  # where m = # columns of 'cols'
  m <- dim(cols)[2]
  
  names(cols) <- paste(into_prefix, 1:m, sep = "_")
  
  return(cols)
}
```



### How it works

Let's break down the `split_into_multiple()` function's components: 

The first step takes an input column and applies the `stringr::str_split_fixed()` function, which returns ["a character matrix with `n` columns."](https://stringr.tidyverse.org/reference/str_split.html) 

```{r arg-cols, eval=FALSE}
cols <- stringr::str_split_fixed(column, pattern, n = Inf)
```

By setting `n` to `Inf`, the number of items to split the `string` into is infinite. 

```{r cols}
cols <- stringr::str_split_fixed(string = JJJSBefore$name, 
                                 pattern = ", ", 
                                 n = Inf)
cols
```

After the `name` column is split into a character matrix of split columns (`cols`), the `split_into_multiple()` function uses [`base::which()`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/which.html) to identify the empty columns in the matrix.

```{r which}
base::which(cols == "")
```

`base::which()` returns a numerical vector that correspond to the empty columns in the `cols` matrix.

![](https://raw.githubusercontent.com/mjfrigaard/tidyverse-tips/master/public/posts/2021-03-14-how-to-write-a-custom-wrangling-function/images/matrix-indeces.png){width=80%}

<!-- ![](~/Dropbox/@projects/02-low-priority/@blogs/tidyverse-dot-tips/tidyverse-tips/public/posts/2021-03-14-how-to-write-a-custom-wrangling-function/images/matrix-indeces.png){width=80%} -->

The `split_into_multiple()` function subsets the `cols` matrix with the output from `base::which(cols == "")` and assigns `NA`s to the locations identified above. 

```{r replace-NAs-cols}
cols[base::which(cols == "")] <- NA
cols
```

Next, we need a `tibble`, not a matrix, so `split_into_multiple()` converts `cols` into a tibble with `cols <- as.tibble(cols)`. 

```{r as.tibble, message=FALSE, warning=FALSE, eval=FALSE}
cols <- tibble::as.tibble(cols)
cols
```

### `as.tibble()` warning

`as.tibble()` throws the following warning, 

```
1: `as.tibble()` is deprecated as of tibble 2.0.0.
Please use `as_tibble()` instead.
The signature and semantics have changed, see `?as_tibble`.
This warning is displayed once every 8 hours.
```

I'll replace it with [`as_tibble()` from `tibble`](https://tibble.tidyverse.org/reference/as_tibble.html).

```{r as_tibble, message=FALSE, warning=FALSE, eval=FALSE}
cols <- tibble::as_tibble(cols, .name_repair = "universal")
cols
```

### `as_tibble()` warning

Now `tibble::as_tibble()` is throwing this warning, 

```
2: The `x` argument of `as_tibble.matrix()` must have column 
names if  `.name_repair` is omitted as of tibble 2.0.0.  
Using compatibility `.name_repair`.  
This warning is displayed once every 8 hours.
```

If I supply the `.name_repair = "universal"` argument, I get the following column names:

```{r , echo=FALSE}
cols <- tibble::as_tibble(cols, .name_repair = "universal")
rmarkdown::paged_table(cols)
```

<br></br>

This will likely be an issue down the road, so I'll address it when I make some adjustments to the `split_into_multiple()` function.

Now we have a `tibble`, but we're missing the original `value` column from `JJJSBefore` (see below). 

```{r , echo=FALSE}
rmarkdown::paged_table(JJJSBefore)
```

<br></br>

`split_into_multiple()` then takes the second value from the  [`base::dim()`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/dim.html) function (which is short for `dim`ensions). 

The second number from `base::dim()` is the number of columns in the `cols` tibble, 

```{r cols-2nd-column}
m <- base::dim(cols)[2]
m
```

I can also get this with [`base::ncols()`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/nrow.html)

```{r ncol}
base::ncol(cols)
```

Finally, `split_into_columns()` uses `base::paste()` to combine `m` with `into_prefix` to create the new column `base::names()` (separated by an underscore `"_"`). 

The `return()` value is `cols` with the new names. 

```{r into_prefix}
into_prefix <- "name"
base::paste(into_prefix, 1:m, sep = "_")
```

Put all together, the function works like so,

```{r full-split_into_multiple-example, eval=FALSE}
split_into_multiple(column = JJJSBefore$name, 
                    pattern = ", ", 
                    into_prefix = "name") -> JJJAfter
JJJAfter
```

```{r , echo=FALSE}
split_into_multiple(column = JJJSBefore$name, 
                    pattern = ", ", 
                    into_prefix = "name") -> JJJAfter
rmarkdown::paged_table(JJJAfter)
```

<br></br>

***

### Address `tibble` warnings 

The `as_tibble()`/`as.tibble()` warnings can be addressed by assigning column names with `base::colnames()` to the matrix ***before*** converting this into a tibble. 

```{r assign-colnames, eval=FALSE}
# create cols matrix
cols <- str_split_fixed(JJJSBefore$name, 
                        pattern = ", ", 
                        n = Inf)
# replace "" with NAs
cols[which(cols == "")] <- NA
# get cols
m <- dim(cols)[2]
# assign names
into_prefix <- "name"
colnames(cols) <- paste(into_prefix, 1:m, sep = "_")
# create tibble
cols <- as_tibble(cols)
cols
```

```{r , echo=FALSE}
# create cols matrix
cols <- str_split_fixed(JJJSBefore$name, 
                        pattern = ", ", 
                        n = Inf)
# replace "" with NAs
cols[which(cols == "")] <- NA
# get cols
m <- dim(cols)[2]
# assign names
into_prefix <- "name"
colnames(cols) <- paste(into_prefix, 1:m, sep = "_")
# create tibble
cols <- as_tibble(cols)
rmarkdown::paged_table(
cols)
```

<br></br>

### Add arguments 

I'll also add a few arguments: 

- an argument for data (`data = `),  
- a default pattern argument (`pattern = [^[:alnum:]]+`),  
- `dplyr::bind_cols()` to combine the new output columns with the original input `data.frame`/`tibble`, and  
- I changed the names of the inputs to have an `in_` prefix, and the outputs to have an `out_` prefix 

<br></br>

## New `split_into_multiple()` 

My adjusted `split_into_multiple()` function is below. 

```{r split_into_multiple,, warning=FALSE, message=FALSE}
split_into_multiple <- function(data, col, pattern = "[^[:alnum:]]+", into_prefix){
  # use regex for pattern, or whatever is provided 
  in_pattern <- pattern
  # convert data to tibble 
  in_data <- tibble::as_tibble(data)
  # convert col to character vector
  in_col <- base::as.character(col)
  # split columns into character matrix
  out_cols <- stringr::str_split_fixed(in_data[[in_col]], 
                                       pattern = in_pattern, 
                                       n = Inf)
  # replace NAs in matrix
  out_cols[base::which(out_cols == "")] <- NA
  # get number of cols
  m <- base::dim(out_cols)[2]
  # assign column names
  base::colnames(out_cols) <- base::paste(into_prefix, 1:m, sep = "_")
  # convert to tibble
  out_cols <- tibble::as_tibble(out_cols)
  # bind cols together
  out_tibble <- dplyr::bind_cols(in_data, out_cols)
  # return the out_tibble
  return(out_tibble)
}
```

<br></br>

Now I'll test `split_into_multiple()` with `JJJSBefore` and see what I get:

```{r test-split_into_multiple, eval=FALSE}
JJJSBefore %>% 
  split_into_multiple(data = ., 
                      col = "name", 
                      into_prefix = "name") -> JJJAfter
JJJAfter
```

```{r , echo=FALSE}
rmarkdown::paged_table(
JJJSBefore %>% 
  split_into_multiple(data = ., 
                      col = "name", 
                      into_prefix = "name"))
```

**GREAT!** It works! But I should test `split_into_multiple()` on a few more examples.

<br></br>

I'll test to see if `split_into_multiple()` works on the `Before` data in the original example,  

```{r test-split_into_multiple-on-Before, echo=FALSE}
Before <- base::data.frame(attr = c(1, 30, 4, 6), 
                           type = c('foo_and_bar', 
                                    'foo_and_bar_2', 
                                    'foo_and_bar_2_and_bar_3', 
                                    'foo_and_bar'))
```

<br></br>

```{r Before, eval=FALSE}
Before
```

```{r , echo=FALSE}
rmarkdown::paged_table(Before)
```

<br></br>

```{r , eval=FALSE}
Before %>% 
  split_into_multiple(data = ., 
                      col = "type", 
                      pattern = "_and_", 
                      into_prefix = "type")
```

```{r , echo=FALSE}
rmarkdown::paged_table(
Before %>% 
  split_into_multiple(data = ., 
                      col = "type", 
                      pattern = "_and_", 
                      into_prefix = "type")
)
```

So far, so good!

<br></br>


What if there is a `data.frame`/`tibble` with a bunch of different characters we need to split on? I can test these data in the `WorseThanBefore` data below. 

```{r , eval=FALSE}
WorseThanBefore <- tibble::tribble(
     ~attr,                     ~type,
        1L,                "foo, bar",
       30L,               "foo-bar/2",
        4L, "foo...bar...2...bar...3",
        6L,               "foo | bar")
WorseThanBefore
```

<br></br>

```{r WorseThanBefore, echo=FALSE}
WorseThanBefore <- tibble::tribble(
     ~attr,                     ~type,
        1L,                "foo, bar",
       30L,               "foo-bar/2",
        4L, "foo...bar...2...bar...3",
        6L,               "foo | bar")
rmarkdown::paged_table(
WorseThanBefore)
```

<br></br>

We'll use `split_into_multiple()` on `WorseThanBefore`, but omit the argument for `pattern`.

```{r WorseThanBefore-split_into_multiple-no-pattern, eval=FALSE}
WorseThanBefore %>% 
    split_into_multiple(data = ., 
                      col = "type", 
                      into_prefix = "type")
```

```{r , echo=FALSE}
rmarkdown::paged_table(
WorseThanBefore %>% 
    split_into_multiple(data = ., 
                      col = "type", 
                      into_prefix = "type")
)
```

<br></br>

`split_into_multiple()` removed any sequence of non-alphanumeric values, but it still retains the original column, which I can remove using `dplyr::select()` helpers (like above).

```{r test-split_into_multiple-with-select-helpers, eval=FALSE}
JJJSBefore %>% 
  split_into_multiple(data = ., 
                      col = "name", 
                      into_prefix = "name") %>% 
  dplyr::select(value, dplyr::contains("name_"))
```

```{r , echo=FALSE}
rmarkdown::paged_table(
  JJJSBefore %>% 
  split_into_multiple(data = ., col = "name", 
                      into_prefix = "name") %>% 
  dplyr::select(value, dplyr::contains("name_"))
)
```

<br></br>

### In closing

This `split_into_multiple()` function has been really helpful for me in the last few projects I've been working on. I hope you can use it too!


#### Noteworthy non-`tidyverse` alternatives

I also liked the `cSplit()` function from the [`splitstackshape` package](https://github.com/mrdwab/splitstackshape) because it can take multiple columns and can be tidied up all in one go!

```{r cSplit}
library(splitstackshape)
# original
JJJSBefore
```

```{r cSplit-wide}
# wide
JJJSBefore %>% 
  splitstackshape::cSplit(indt = ., 
                          splitCols = "name", 
                          sep = ", ", 
                          drop = FALSE, 
                          direction = "wide") 
```

```{r cSplit-long}
# long
JJJSBefore %>% 
  splitstackshape::cSplit(indt = ., 
                          splitCols = "name", 
                          sep = ", ", 
                          direction = "long") 
```



Huge thanks to [Hadley](https://stackoverflow.com/users/16632/hadley) and [Yannis P.](https://stackoverflow.com/users/1885713/yannis-p) and everyone else on Stackoverflow!

```{r tidyverse_logo}
tidyverse_logo()
```

